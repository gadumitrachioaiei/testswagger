// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/gadumitrachioaiei/testswagger/models"
)

// GetHealthReader is a Reader for the GetHealth structure.
type GetHealthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHealthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewGetHealthNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetHealthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHealthNoContent creates a GetHealthNoContent with default headers values
func NewGetHealthNoContent() *GetHealthNoContent {
	return &GetHealthNoContent{}
}

/* GetHealthNoContent describes a response with status code 204, with default header values.

Success.
*/
type GetHealthNoContent struct {
}

func (o *GetHealthNoContent) Error() string {
	return fmt.Sprintf("[GET /health][%d] getHealthNoContent ", 204)
}

func (o *GetHealthNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHealthBadRequest creates a GetHealthBadRequest with default headers values
func NewGetHealthBadRequest() *GetHealthBadRequest {
	return &GetHealthBadRequest{}
}

/* GetHealthBadRequest describes a response with status code 400, with default header values.

Validation error.
*/
type GetHealthBadRequest struct {
	Payload *models.Error
}

func (o *GetHealthBadRequest) Error() string {
	return fmt.Sprintf("[GET /health][%d] getHealthBadRequest  %+v", 400, o.Payload)
}
func (o *GetHealthBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetHealthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
